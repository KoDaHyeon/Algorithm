pair.first
pair.second 로 접근

배열을 선언후에 배열 크기를 입력받았으면 배열이름.resize(배열원소개수); 로 사이즈 정의해주기

다익스트라에서 V^2방식은 정점수, 간선수가 많으면 시간초과나기 쉽상
그럴 경우에는 VlogE방식 사용

우선순위큐의 자료형?이 pair<int, int>인 경우
1) pair.first를 기준으로 정렬
2) pair.first가 같은 경우 pair.second를 기준으로 정렬

플로이드-와샬 알고리즘은 블로그 참고(안경잡이 개발자)
플로이드-와샬은 복잡도(O(V^3))가 크기 때문에 정점, 간선수가 많으면 안됨
정점, 간선수가 적어도 노드 방문이 반복되는게 많으면 안좋음!
모든 쌍에 대한 거리를 구할때 플로이드-와샬은 필수(다익스트라는 하나의 출발점에 대한 모든 거리 구하기만 가능)

메모리를 추가로 할당받는건 무리가 큰 연산임. 미리 메모리 크기 정해놓고 거기서 연산하는게 효율성 면에서는 좋음

cin cout : 느림
scanf printf : 빠름
ios::sync_with_stdio(false); 
cin.tie(NULL); //이렇게 동기화를 끊어주고 cin, cout을 쓰면 빨라짐
하지만 cin, scanf 또는 cout, printf를 같이 사용하면 안됨
입출력이 엄청 많을때 저 코드를 써줘야 빨라짐. 저 코드를 써야 시간내에 풀수있는 문제도 있음
-> 입출력을 빠르게 해주는 코드(나름 부가적인 것)

